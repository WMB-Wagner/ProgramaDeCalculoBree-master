# -*- coding: utf-8 -*-
"""Bree_interface.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13xRuBjUA5BFpHx7XJeWldICGhqSmwHcW

# Entrada de dados
"""
from pandasql import sqldf
import sys
import os

#sys.path.append('OneDrive/Documentos/Bree')
sys.path.append('OneDrive/Documentos/GitHub/bree_reactor')
sys.path.append('Documents/GitHub')

#from pathlib import Path
path_name = os.getcwd()
path_name = path_name = path_name.replace("\\","/")
path_name = path_name = path_name.replace("C:","")
path_name

pysqldf = lambda q: sqldf(q, globals())

import bree_reactor_core_1 as bree

#@title Projeto / Arquivo { run: "auto", vertical-output: true }
projeto = "'bree prototipo Di = 1200 mm'"#@param {type:"string"}

"""# Dataframe de condutores"""

condutores = bree.condutores()
#condutores

"""# Dataframe de custos exportado pelo TOTVS"""

custos = bree.custos()
custos

q = bree.string_group_by_produto()
q

custos = pysqldf(q)
custos

"""# Coordenada do centro do reator"""

x, y, z = 0, 0, 0

"""# Dados do Sistema Gerais
## Entradas
* Vn tensão nominal do sistema em kV
* f frequência do sistema Hz
* NBI nível básico de impulso (kV pico)
* Altitude (m)
* Temperatura ambiente (ᵅC)
* Velocidade do vento (km/h)

"""

#@title Dados do sistema { run: "auto", vertical-output: true }
Vn = 13.8 #@param {type:"number"}
f = 60 #@param {type:"number"}
NBI_sys = 110 #@param {type:"number"}
altitude = 1000 #@param {type:"number"}
tamb = 40 #@param {type:"number"}
tref = 75 #@param {type:"number"}
Vvento = 120 #@param {type:"number"}
norma = "NBR 5119 - Reator" #@param ["NBR 5119 - Reator", "NBR 8119 - Bobina", "IEC 60076-6 - Reator", "IEC 60353 - Bobina", "ANSI C57.21 - Reator Shunt", "ANSI C93.3 - Bobina", "ANSI C57.21 - Reator Serie"] {allow-input: true}
output = "Tensão do sistema {}kV, frequência industrial {}Hz, NBI {} kV, Temperatura ambiente {}, altitude {}m., Noma {}"
output.format(Vn, f, NBI_sys, tamb, altitude, norma)

"""# Fatores de correção devido a altitude."""

fatores = bree.corr_fact(altitude=altitude,norma=norma)
output = "Fator de correção térmico {}, Fator de correção dielétrico {}."
output.format(fatores[0], fatores[1])

"""# Dados de curto circuito do sistema

### Dados considerando a potência de curto circuito.
# Entrada
* pcc potência de curto-circuíto (MVA)

# Saídas
* icc corrente de curto-circuíto (kA rms)
* zcc impedância de curto-circuíto (Ω)
"""

#@title Dados de curto_circuíto do sistema pela potência. { run: "auto", vertical-output: true }
pcc = 1000#@param {type:"number"}
icc = pcc/(bree.np.sqrt(3)*Vn)
pcc = bree.np.sqrt(3)*Vn*icc
zcc = Vn**2/pcc
output = "Pcc {}MVA, Icc {}kA, Zcc {} Ω."
output.format(pcc, icc, zcc)

"""# Dados considerando a corrente de curto circuito
### Entrada
* icc corrente de curto-circuíto (kA rms)
### Saídas
* zcc impedância de curto-circuíto (Ω)
* pcc potência de curto-circuíto (MVA)
"""

#@title Dados de curto_circuíto do sistema pelo Icc. { run: "auto", vertical-output: true }
icc = 40#@param {type:"number"}
zcc = Vn/(bree.np.sqrt(3)*icc)
pcc = bree.np.sqrt(3)*Vn*icc
output = "Pcc {}MVA, Icc {}kA, Zcc {} Ω."
output.format(pcc, icc, zcc)

"""# Dados considerando a corrente de curto circuito
## Entrada
* zcc impedância de curto-circuíto (Ω)

## Saídas
* icc corrente de curto-circuíto (kA rms)
* pcc potência de curto-circuíto (MVA)
"""

#@title Dados de curto_circuíto do sistema pelo zcc. { run: "auto", vertical-output: true }
zcc = 0.2#@param {type:"number"}
icc = Vn/(bree.np.sqrt(3)*zcc)
pcc = bree.np.sqrt(3)*Vn*icc
output = "Pcc {}MVA, Icc {}kA, Zcc {} Ω."
output.format(pcc, icc, zcc)

"""# Classe de temperatura"""

#@title Classe de temperatura do material isolante { run: "auto", vertical-output: true }

classe = 130 #@param ["130", "155", "180"] {allow-input: true}

"""# Dados do reator para limitação de inrush
* Ln indutância nominal (mH)
* In corrente nominal (A rms)
* NBI (kV pico)
* incc (kA rms)
* t duração do incc (s)
* ipeak (kA pico)
* Ltarget indutância para cálculo (mH)
* folga fator de folga

"""

#@title Dados do reator para limitação de inrush.
Ln = 1#@param {type:"number"}
In = 1000#@param {type:"number"}
NBI = 110#@param {type:"number"}
incc = 10#@param {type:"number"}
t = 1#@param {type:"number"}
ipeak = 2.55#@param {type:"number"}
Ltarget = Ln*1.1
folga = 1

"""# Dados do reator para limitação de curto-circuíto
* incc1 incc após a inserção do limitador (kA rms)
* incc2 incc após a inserção do limitador (kA rms)
* Ln indutância nominal (mH)
* In corrente nominal (A rms)
* NBI (kV pico)
* incc (kA rms)
* t duração do incc (s)
* ipeak (kA pico)
* Ltarget indutância para cálculo (mH)
* folga fator de folga
"""

icc2 = 20
zcc1 = Vn/(bree.np.sqrt(3)*icc)
zcc2 = Vn/(bree.np.sqrt(3)*icc2)
zadd  = zcc2- zcc1
Ln = zadd/(2*bree.np.pi*f)*1000
inom = 1000

Ln

"""# Dados do reator para filtro de harmônico
* Ln indutância nominal (mH)
* In corrente nominal (A rms)
* NBI (kV pico)
* incc (kA rms)
* t duração do incc (s)
* ipeak (kA pico)
* Ltarget indutância para cálculo (mH)
* folga fator de folga
"""

#@title Dados do reator para limitação de inrush. { run: "auto", vertical-output: true }
Ln = 1.45#@param {type:"number"}
In = 1200#@param {type:"number"}
NBI = 110#@param {type:"number"}
incc = 40#@param {type:"number"}
t = 1#@param {type:"number"}
ipeak = 102 #@param {type:"number"}
fator_ind = 1.0 #@param {type:"number"}
folga = 1
Ltarget = Ln*fator_ind
Ltarget

"""# Espectro de correntes harmônicas
* Valores rms dos harmônicos
* Frequências harmônicas

"""

rms_s = [1200, 1, 1, 1, 1]
freqs = [60,120,180,240,300]
# dictionary of lists 
dict = {'RMS (A)': rms_s, 'freq (Hz)': freqs}
harms = bree.pd.DataFrame(dict)
harms

"""# Material condutor"""

#@title Material Condutor { run: "auto" }
material = "Al" #@param ["Al", "Cu", "Inox AISI 304", "Inox AISI 310", "Liga de Al"]

materiais = bree.materiais()
q = bree.query_material(material = material)
q

mat = pysqldf(q)
mat

rho20 = mat['Resistividade (Ohm x mm2 /m)'][0]
rho_Tref = (mat['Coeficiente K'][0]+ tref)/(mat['Coeficiente K'][0]+20)*rho20
dens = mat['Densidade (kg/m3)'][0]
dens

"""# Alturas dos aneis de fibra"""

#@title Altura dos aneis de fibra { run: "auto", vertical-output: true }
anel_inf =  35#@param {type:"number"}
anel_sup = 35 #@param {type:"number"}

"""# Dados das cruzetas"""

#@title Dados das cruzetas { run: "auto", vertical-output: true }
larg_cruz_inf = 76.2 #@param {type:"number"}
larg_cruz_sup = 76.2 #@param {type:"number"}
esp_cruz_inf = 12.7 #@param {type:"number"}
esp_cruz_sup = 12.7 #@param {type:"number"}
num_bracos_inf = 6 #@param {type:"integer"}
num_bracos_sup = 6 #@param {type:"integer"}
num_bracos = max(num_bracos_inf,num_bracos_sup)
num_bracos

"""# Diâmetro interno / Largura do espaçador"""

#@title Diâmetro interno { run: "auto", vertical-output: true }
di =  1200#@param {type:"number"}
duto = 19.05 #@param {type:"number"}

"""# Definição das formações dos cilindros"""

awgs = [4, 3.5, 3, 2, 2]
axiais = [2]
radiais = [4,3,3,3,4]
fi = []
fe = []
ducts = [duto]
axiais = bree.axial_cil(awgs,axiais)
radiais = bree.radial_cil(awgs,radiais)
fi = bree.fi_cil(awgs,fi,3.2,1.2)
fe = bree.fe_cil(awgs, fe,3.2,1.2)
r_m = bree.rho_cil(awgs,rho20=rho20) 
ducts = bree.duto_cil(awgs,ducts,19.05)
fator_folga=bree.fator_folga(awgs,1.0)
r_esp = bree.rho_cil(awgs,rho20=rho20)
densidade = bree.densidade(awgs,dens)
dict = {'condutor AWG': awgs, 'Fios axiáis': axiais, 'fios radiais': radiais, 'Fibra interna (mm)': fi,
        'Fibra externa (mm)': fe,'espaçadores (mm)':ducts,'Fator de enrolamento':fator_folga,'Resistividade':r_m,'Densidade':densidade }
#axiais         
cilindros = bree.pd.DataFrame(dict)
cilindros
#densidade

q = bree.string_join_cil_cond(classe)
q

cilindros = pysqldf(q)
cilindros

q = bree.string_join_cil_custo()
q

cil = pysqldf(q)
cil

#cil.to_excel('/content/drive/MyDrive/Bree/'+projeto+'.xlsx',sheet_name='Cilindro')
cil.to_excel(path_name+'/'+projeto+'.xlsx',sheet_name='Cilindro')

camadas, ds = bree.camadas(di=di,cils=cil,x=0,y=0,z=0, corr=In)
print(ds)
camadas

q = """SELECT  sum(espessura) as espessura
       FROM cil
       """
q

esp = pysqldf(q)
esp

ds1 = di +2*esp['espessura'][0]
ds1/ds

ds

M, R, ind_calc, ind, flx, itarget = bree.equilibrio(camadas,Ltarget)

camadas

ind_calc

M

ind

#from pathlib import Path
path_name = os.getcwd()
path_name = path_name = path_name.replace("\\","/")
path_name = path_name = path_name.replace("C:","")
path_name = path_name+'/'

path_name = path_name+projeto
tipo = '.xlsx'
path_name = path_name + tipo
path_name = path_name.replace("'","")
#the_path = Path(path_name)
with bree.pd.ExcelWriter(path_name) as writer:
    cil.to_excel(writer, sheet_name="Cilindros")  
    camadas.to_excel(writer, sheet_name="Camadas")
    harms.to_excel(writer,sheet_name="Harmônicas")

camadas.columns

path_name

#os.getcwd()

'''writer = bree.pd.ExcelWriter('/content/drive/MyDrive/Bree/'+projeto+'.xlsx', engine='xlsxwriter')
cil.to_excel(writer, sheet_name="Cilindros")  
camadas.to_excel(writer, sheet_name="Camadas")
harms.to_excel(writer,sheet_name="Harmônicas")'''

#path_name.replace("'","")